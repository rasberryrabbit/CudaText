Index: compiler/nadd.pas
===================================================================
--- compiler/nadd.pas	(revision 32556)
+++ compiler/nadd.pas	(working copy)
@@ -2234,6 +2234,58 @@
         tempnode (*,tempnode2*) : ttempcreatenode;
         cmpfuncname: string;
         para: tcallparanode;
+        newencoding: tstringencoding;
+        
+        procedure checkencodingnode(hn:tnode);
+        var
+          hp, hp3: tnode;
+        begin
+          hp:=hn;
+          if assigned(hp) then
+          begin
+            if hp.nodetype=blockn then
+            begin
+              hp3:=tblocknode(hp).statements;
+              repeat
+                hp:=tstatementnode(hp3).statement;
+                checkencodingnode(hp);
+                hp3:=tstatementnode(hp3).next;
+              until assigned(hp3);
+            end else
+            if (hp.nodetype=typeconvn) and 
+                assigned(ttypeconvnode(hp).resultdef) and
+                (ttypeconvnode(hp).resultdef.typ=stringdef) then 
+            begin
+              if assigned(ttypeconvnode(hp).left) and 
+                 (ttypeconvnode(hp).left.nodetype=addn) and
+                 assigned(taddnode(ttypeconvnode(hp).left).resultdef) and
+                 (taddnode(ttypeconvnode(hp).left).resultdef.typ=stringdef) and
+                 taddnode(ttypeconvnode(hp).left).isequal(self) then
+              begin
+                if assigned(ttypeconvnode(hp).totypedef) and 
+                  (tstringdef(ttypeconvnode(hp).totypedef).stringtype=st_ansistring) then
+                  newencoding:=tstringdef(ttypeconvnode(hp).totypedef).encoding;
+              end;
+            end;
+            if hp is tbinarynode then
+            begin
+              checkencodingnode(tbinarynode(hp).left);
+              checkencodingnode(tbinarynode(hp).right);
+            end else
+            if hp is tunarynode then
+              checkencodingnode(tunarynode(hp).left);
+          end;
+        end;
+
+        procedure encodingfromtypeconv;
+        begin
+            if assigned(aktcallnode) then
+              checkencodingnode(aktcallnode)
+            else
+            if assigned(aktassignmentnode) then
+              checkencodingnode(aktassignmentnode.right);
+        end;
+      
       begin
         result:=nil;
         { when we get here, we are sure that both the left and the right }
@@ -2271,16 +2323,20 @@
                           )
                         );
                   if is_ansistring(resultdef) then
+                  begin
+                    newencoding:=tstringdef(resultdef).encoding;
+                    encodingfromtypeconv;
                     para:=ccallparanode.create(
                             cordconstnode.create(
                               { don't use getparaencoding(), we have to know
                                 when the result is rawbytestring }
-                              tstringdef(resultdef).encoding,
+                              newencoding,
                               u16inttype,
                               true
                             ),
                             para
                           );
+                  end;
                   result:=ccallnode.createintern(
                             'fpc_'+tstringdef(resultdef).stringtypname+'_concat',
                             para
@@ -2311,16 +2367,21 @@
                           )
                         );
                   if is_ansistring(resultdef) then
+                  begin
+                    { assign typeconvnode encoding to addnode encoding }
+                    newencoding:=tstringdef(resultdef).encoding;
+                    encodingfromtypeconv;
                     para:=ccallparanode.create(
                             cordconstnode.create(
                               { don't use getparaencoding(), we have to know
                                 when the result is rawbytestring }
-                              tstringdef(resultdef).encoding,
+                              newencoding,
                               u16inttype,
                               true
                             ),
                             para
                           );
+                  end;
                   addstatement(
                     newstatement,
                     ccallnode.createintern(
Index: compiler/nopt.pas
===================================================================
--- compiler/nopt.pas	(revision 32556)
+++ compiler/nopt.pas	(working copy)
@@ -312,6 +312,57 @@
   tempnode    : ttempcreatenode;
   is_shortstr : boolean;
   para : tcallparanode;
+  newencoding: tstringencoding;
+
+    procedure checkencodingnode_multi(hn:tnode);
+    var
+      hp1, hp3: tnode;
+    begin
+      hp1:=hn;
+      if assigned(hp1) then
+      begin
+        if hp1.nodetype=blockn then
+        begin
+          hp3:=tblocknode(hp1).statements;
+          repeat
+            hp1:=tstatementnode(hp3).statement;
+            checkencodingnode_multi(hp1);
+            hp3:=tstatementnode(hp3).next;
+          until assigned(hp3);
+        end else
+        if (hp1.nodetype=typeconvn) and 
+            assigned(ttypeconvnode(hp1).resultdef) and
+            (ttypeconvnode(hp1).resultdef.typ=stringdef) then 
+        begin
+          if assigned(ttypeconvnode(hp1).left) and 
+             (ttypeconvnode(hp1).left.nodetype=addn) and
+             assigned(taddnode(ttypeconvnode(hp1).left).resultdef) and
+             (taddnode(ttypeconvnode(hp1).left).resultdef.typ=stringdef) and
+             taddnode(ttypeconvnode(hp1).left).isequal(p) then
+          begin
+            if assigned(ttypeconvnode(hp1).totypedef) and 
+              (tstringdef(ttypeconvnode(hp1).totypedef).stringtype=st_ansistring) then
+              newencoding:=tstringdef(ttypeconvnode(hp1).totypedef).encoding;
+          end;
+        end;
+        if hp1 is tbinarynode then
+        begin
+          checkencodingnode_multi(tbinarynode(hp1).left);
+          checkencodingnode_multi(tbinarynode(hp1).right);
+        end else
+        if hp1 is tunarynode then
+          checkencodingnode_multi(tunarynode(hp1).left);
+      end;
+    end;
+
+    procedure encodingfromtypeconv_multi;
+    begin
+            if assigned(aktcallnode) then
+              checkencodingnode_multi(aktcallnode)
+            else
+            if assigned(aktassignmentnode) then
+              checkencodingnode_multi(aktassignmentnode.right);
+    end;
 begin
   arrp:=nil;
   hp:=p;
@@ -347,16 +398,20 @@
               ccallparanode.create(aktassignmentnode.left.getcopy,nil)
             );
       if is_ansistring(p.resultdef) then
+      begin
+        newencoding:=tstringdef(p.resultdef).encoding;
+        encodingfromtypeconv_multi;
         para:=ccallparanode.create(
                 cordconstnode.create(
                   { don't use getparaencoding(), we have to know
                     when the result is rawbytestring }
-                  tstringdef(p.resultdef).encoding,
+                  newencoding,
                   u16inttype,
                   true
                 ),
                 para
               );
+      end;
       result:=ccallnode.createintern(
                 'fpc_'+tstringdef(p.resultdef).stringtypname+'_concat_multi',
                 para
@@ -383,16 +438,21 @@
               ccallparanode.create(ctemprefnode.create(tempnode),nil)
             );
       if is_ansistring(p.resultdef) then
+      begin
+        { assign typeconvnode encoding to addnode encoding }
+        newencoding:=tstringdef(p.resultdef).encoding;
+        encodingfromtypeconv_multi;
         para:=ccallparanode.create(
                 cordconstnode.create(
                   { don't use getparaencoding(), we have to know
                     when the result is rawbytestring }
-                  tstringdef(p.resultdef).encoding,
+                  newencoding,
                   u16inttype,
                   true
                 ),
                 para
               );
+      end;
       addstatement(
         newstatement,
         ccallnode.createintern(
Index: packages/fcl-json/src/jsonconf.pp
===================================================================
--- packages/fcl-json/src/jsonconf.pp	(revision 32556)
+++ packages/fcl-json/src/jsonconf.pp	(working copy)
@@ -407,11 +407,11 @@
     end;
   If Not Assigned(el) then
     begin
-    El:=TJSONString.Create(UTF8encode(AValue));
+    El:=TJSONString.Create(pchar(UTF8encode(AValue)));
     O.Add(ElName,El);
     end
   else
-    El.AsString:=UTF8Encode(AValue);
+    El.AsString:=pchar(UTF8Encode(AValue));
   FModified:=True;
 end;
 
Index: packages/paszlib/src/zipper.pp
===================================================================
--- packages/paszlib/src/zipper.pp	(revision 32556)
+++ packages/paszlib/src/zipper.pp	(working copy)
@@ -32,6 +32,8 @@
   LOCAL_FILE_HEADER_SIGNATURE                = $04034B50;
   CENTRAL_FILE_HEADER_SIGNATURE              = $02014B50;
   ZIP64_HEADER_ID                            = $0001;
+  // infozip unicode path
+  INFOZIP_UNICODE_PATH_ID                    = $7075;
 
 const
   OS_FAT  = 0; //MS-DOS and OS/2 (FAT/VFAT/FAT32)
@@ -758,6 +760,17 @@
       Result := Result or UNIX_FILE;
 end;
 
+function CRC32Str(const s:string):DWord;
+var
+  i:Integer;
+begin
+  Result:=$FFFFFFFF;
+  if Length(S)>0 then
+    for i:=1 to Length(s) do
+      Result:=Crc_32_Tab[Byte(Result XOR LongInt(s[i]))] XOR ((Result SHR 8) AND $00FFFFFF);
+  Result:=not Result;
+end;
+
 { ---------------------------------------------------------------------
     TDeCompressor
   ---------------------------------------------------------------------}
@@ -2035,6 +2048,9 @@
   D : TDateTime;
   ExtraFieldHdr: Extensible_Data_Field_Header_Type;
   SavePos: int64; //could be qword but limited by stream
+  // Infozip unicode path
+  Infozip_Unicode_Path_Ver:Byte;
+  Infozip_Unicode_Path_CRC32:DWord;
 Begin
   FZipStream.Seek(Item.HdrPos,soBeginning);
   FZipStream.ReadBuffer(LocalHdr,SizeOf(LocalHdr));
@@ -2052,7 +2068,7 @@
       if Extra_Field_Length>0 then
         begin
         SavePos := FZipStream.Position;
-        if (LocalHdr.Extra_Field_Length>=SizeOf(ExtraFieldHdr)+SizeOf(LocalZip64Fld)) then
+        if (LocalHdr.Extra_Field_Length>=SizeOf(ExtraFieldHdr)) then
           while FZipStream.Position<SavePos+LocalHdr.Extra_Field_Length do
             begin
             FZipStream.ReadBuffer(ExtraFieldHdr, SizeOf(ExtraFieldHdr));
@@ -2065,7 +2081,38 @@
             {$IFDEF FPC_BIG_ENDIAN}
               LocalZip64Fld := SwapZ64EIF(LocalZip64Fld);
             {$ENDIF}
-              end;
+              end
+            // Infozip unicode path
+            else if ExtraFieldHdr.Header_ID=INFOZIP_UNICODE_PATH_ID then
+              begin
+                FZipStream.ReadBuffer(Infozip_Unicode_Path_Ver,1);
+                if Infozip_Unicode_Path_Ver=1 then begin
+                  FZipStream.ReadBuffer(Infozip_Unicode_Path_CRC32,sizeof(Infozip_Unicode_Path_CRC32));
+                  {$IFDEF FPC_BIG_ENDIAN}
+                  Infozip_Unicode_Path_CRC32:=SwapEndian(Infozip_Unicode_Path_CRC32);
+                  {$ENDIF}
+                  if CRC32Str(S)=Infozip_Unicode_Path_CRC32 then begin
+                    SetLength(S,ExtraFieldHdr.Data_Size-5);
+                    FZipStream.ReadBuffer(S[1],Length(S));
+                    {$IF FPC_FULLVERSION>=20701}
+                    if DefaultSystemCodePage<>CP_UTF8 then
+                      Item.ArchiveFileName:=Utf8ToAnsi(S)
+                      else
+                        Item.ArchiveFileName:=S;
+                    if DefaultRTLFileSystemCodePage<>CP_UTF8 then
+                       Item.DiskFileName:=Utf8ToAnsi(S)
+                       else
+                         Item.DiskFileName:=S;
+                    {$ELSE}
+                    Item.ArchiveFileName:=Utf8ToAnsi(S);
+                    Item.DiskFileName:=Utf8ToAnsi(S);
+                    {$ENDIF}
+                  end else
+                    FZipStream.Seek(ExtraFieldHdr.Data_Size-5,soFromCurrent);
+                end else
+                  FZipStream.Seek(ExtraFieldHdr.Data_Size-1,soFromCurrent);
+              end else
+                FZipStream.Seek(ExtraFieldHdr.Data_Size,soFromCurrent);
             end;
         // Move past extra fields
         FZipStream.Seek(SavePos+Extra_Field_Length,soFromBeginning);
@@ -2233,6 +2280,9 @@
   NewNode   : TFullZipFileEntry;
   D : TDateTime;
   S : String;
+  // infozip unicode path
+  Infozip_unicode_path_ver : byte; // always 1
+  Infozip_unicode_path_crc32 : DWord;
 Begin
   FindEndHeaders(EndHdr, EndHdrPos,
     EndZip64Hdr, EndZip64HdrPos);
@@ -2323,6 +2373,31 @@
               NewNode.HdrPos := Zip64Field.Relative_Hdr_Offset;
               end;
             end
+            // infozip unicode path extra field
+          else if ExtraFieldHeader.Header_ID = INFOZIP_UNICODE_PATH_ID then
+            begin
+              FZipStream.ReadBuffer(Infozip_unicode_path_ver,1);
+              if Infozip_unicode_path_ver=1 then begin
+                FZipStream.ReadBuffer(Infozip_unicode_path_crc32,sizeof(Infozip_unicode_path_crc32));
+                {$IFDEF FPC_BIG_ENDIAN}
+                Infozip_unicode_path_crc32:=SwapEndian(Infozip_unicode_path_crc32);
+                {$ENDIF}
+                if CRC32Str(S)=Infozip_unicode_path_crc32 then begin
+                  SetLength(S,ExtraFieldHeader.Data_Size-5);
+                  FZipStream.ReadBuffer(S[1],Length(S));
+                  {$if FPC_FULLVERSION>=20701}
+                  if DefaultSystemCodePage<>CP_UTF8 then
+                    NewNode.ArchiveFileName:=Utf8ToAnsi(S)
+                    else
+                      NewNode.ArchiveFileName:=S;
+                  {$ELSE}
+                  NewNode.ArchiveFileName:=Utf8ToAnsi(S);
+                  {$ENDIF}
+                end else
+                  FZipStream.Seek(ExtraFieldHeader.Data_Size-5,soFromCurrent);
+              end else
+                FZipStream.Seek(ExtraFieldHeader.Data_Size-1,soFromCurrent);
+            end
           else
             begin
               // Read past non-Zip64 extra field
Index: packages/winunits-base/src/typelib.pas
===================================================================
--- packages/winunits-base/src/typelib.pas	(revision 32556)
+++ packages/winunits-base/src/typelib.pas	(working copy)
@@ -466,6 +466,7 @@
   VD: lpVARDESC;
   aPropertyDefs:array of TPropertyDef;
   Propertycnt,iType:integer;
+  Modifier: string;
 
   function findProperty(ireqdispid:integer):integer;
   var i:integer;
@@ -545,11 +546,18 @@
     OleCheck(TI.GetNames(FD^.memid,@BL,length(BL),cnt));
     // skip IUnknown and IDispatch methods
     sl:=lowercase(BL[0]);
-    if (sl='queryinterface') or (sl='addref') or (sl='release') then  //IUnknown
+    (*************************
+     * Code portion removed by José Mejuto.
+     * If the interface declaration appears in the TLB it must be imported
+     * or the sequences of functions will be broken and any function below this
+     * point would be called wrongly.
+     *************************
+    if ((sl='queryinterface') or (sl='addref') or (sl='release')) then  //IUnknown
       continue;
     if bIsDispatch and
       ((sl='gettypeinfocount') or (sl='gettypeinfo') or (sl='getidsofnames') or (sl='invoke')) then  //IDispatch
       continue;
+      *)
     // get return type
     if bIsDispatch and ((FD^.invkind=INVOKE_PROPERTYGET) or (FD^.invkind=INVOKE_FUNC)) then
       begin
@@ -761,6 +769,8 @@
           begin
           //getters/setters for interface, insert in interface as they come,
           //store in aPropertyDefs to create properties at the end
+          bParamByRef:=(FD^.lprgelemdescParam[0].tdesc.vt=VT_PTR) and                         // by ref
+          not((FD^.lprgelemdescParam[0].tdesc.lptdesc^.vt=VT_USERDEFINED) and bIsInterface);// but not pointer to interface
           if bPropHasParam then
             begin
             sPropParam2:='('+sPropParam+')';
@@ -785,33 +795,42 @@
             begin
             if not MakeValidId(GetName(1),sVarName) then
               AddToHeader('//  Warning: renamed parameter ''%s'' in %s.Set_%s to ''%s''',[GetName(1),iname,sMethodName,sVarName]);
-            with aPropertyDefs[findProperty(FD^.memid)] do
+            if not bParamByRef then
               begin
-              if FD^.invkind=INVOKE_PROPERTYPUT then
+              with aPropertyDefs[findProperty(FD^.memid)] do
                 begin
-                sptype:=sType;
-                bput:=true;
-                if bputref then                  //disambiguate  multiple setter
-                  sMethodName:=sMethodName+'_';
-                pname:=sMethodName;
-                end
-              else
-                begin
-                sprtype:=sType;
-                bputref:=true;
-                if bput then                     //disambiguate  multiple setter
-                  sMethodName:=sMethodName+'_';
-                prname:=sMethodName;
+                if FD^.invkind=INVOKE_PROPERTYPUT then
+                  begin
+                  sptype:=sType;
+                  bput:=true;
+                  if bputref then                  //disambiguate  multiple setter
+                    sMethodName:=sMethodName+'_';
+                  pname:=sMethodName;
+                  end
+                else
+                  begin
+                  sprtype:=sType;
+                  bputref:=true;
+                  if bput then                     //disambiguate  multiple setter
+                    sMethodName:=sMethodName+'_';
+                  prname:=sMethodName;
+                  end;
+                  sorgname:=BstrName;
+                  sdoc:=BstrDocString;
+                  sParam:=sPropParam;
+                  sDefault:=sl;
                 end;
-              sorgname:=BstrName;
-              sdoc:=BstrDocString;
-              sParam:=sPropParam;
-              sDefault:=sl;
               end;
+
+            if not bParamByRef then begin
+              Modifier:='const';
+            end else begin
+              Modifier:='var';
+            end;
             if bPropHasParam then
-              s:=s+format('   procedure Set_%s(const %s:%s); %s;'#13#10,[sMethodName,sPropParam3,sType,sConv])
+              s:=s+format('   procedure Set_%s(%s %s:%s); %s;'#13#10,[sMethodName,Modifier,sPropParam3,sType,sConv])
             else
-              s:=s+format('   procedure Set_%s(const %s:%s); %s;'#13#10,[sMethodName,sVarName,sType,sConv]);
+              s:=s+format('   procedure Set_%s(%s %s:%s); %s;'#13#10,[sMethodName,Modifier,sVarName,sType,sConv]);
             end;
           end;
         end;
Index: rtl/inc/astrings.inc
===================================================================
--- rtl/inc/astrings.inc	(revision 32556)
+++ rtl/inc/astrings.inc	(working copy)
@@ -211,12 +211,21 @@
 Var
   S1Len, S2Len: SizeInt;
   same : boolean;
-  S1CP, S2CP, DestCP: TSystemCodePage;
+  S1CP, S2CP, DestCP
+{$ifdef FPC_HAS_CPSTRING}  
+  , DSCP
+{$endif FPC_HAS_CPSTRING}  
+         : TSystemCodePage;
 begin
 {$ifdef FPC_HAS_CPSTRING}
-  DestCP:=cp;
-  if DestCp=CP_NONE then
-    DestCP:=DefaultSystemCodePage;
+  DSCP:=DefaultSystemCodePage;
+  if cp=CP_NONE then
+  begin
+    DestCP:=StringCodePage(DestS);
+    if (DestCP=0) or (DestCP=DSCP) then
+      DestCP:=CP_NONE;
+  end else  
+    DestCP:=cp;
 {$else FPC_HAS_CPSTRING}
   DestCP:=StringCodePage(DestS);
 {$endif FPC_HAS_CPSTRING}
@@ -225,23 +234,25 @@
     but avoid conversions if either addend is empty (StringCodePage will return
     DefaultSystemCodePage in that case, which may differ from other addend/dest) }
   if S1='' then
+    {$ifdef FPC_HAS_CPSTRING}
+    S1CP:=0
+    {$else FPC_HAS_CPSTRING}
     S1CP:=DestCP
+    {$endif FPC_HAS_CPSTRING}
   else
     S1CP:=StringCodePage(S1);
   S1CP:=TranslatePlaceholderCP(S1CP);
   if S2='' then
+    {$ifdef FPC_HAS_CPSTRING}
+    S2CP:=0
+    {$else FPC_HAS_CPSTRING}
     S2CP:=DestCP
+    {$endif FPC_HAS_CPSTRING}
   else
     S2CP:=StringCodePage(S2);
   S2CP:=TranslatePlaceholderCP(S2CP);
-{$ifdef FPC_HAS_CPSTRING}
-  { if the result is rawbytestring and both strings have the same code page,
-    keep that code page }
-  if (cp=CP_NONE) and
-     (S1CP=S2CP) then
-    DestCP:=S1CP;
-{$endif FPC_HAS_CPSTRING}
-  if (S1CP<>DestCP) or (S2CP<>DestCP) then
+  { skip unicode conversion if dest encoding is CP_NONE }
+  if (DestCP<>CP_NONE) and ((S1CP<>DestCP) or (S2CP<>DestCP)) then
     begin
       ansistr_concat_complex(DestS,S1,S2,DestCP);
       exit;
@@ -281,6 +292,10 @@
       fpc_pchar_ansistr_intern_charmove(PAnsiChar(S1),0,DestS,0,S1Len);
       fpc_pchar_ansistr_intern_charmove(PAnsiChar(S2),0,DestS,S1Len,S2Len+1);
     end;
+  {$ifdef FPC_HAS_CPSTRING}
+  if DestCP=CP_NONE then
+    DestCP:=0;
+  {$endif FPC_HAS_CPSTRING}
   SetCodePage(DestS,DestCP,false);
 end;
 {$endif FPC_HAS_ANSISTR_CONCAT}
@@ -299,7 +314,11 @@
   destcopy    : pointer;
   U           : UnicodeString;
   DestCP,
-  tmpCP       : TSystemCodePage;
+  tmpCP
+{$ifdef FPC_HAS_CPSTRING}  
+  , DSCP        
+{$endif FPC_HAS_CPSTRING}  
+              : TSystemCodePage;
   sameCP      : Boolean;
 begin
   if high(sarr)=0 then
@@ -308,9 +327,14 @@
       exit;
     end;
 {$ifdef FPC_HAS_CPSTRING}
-  DestCP:=cp;
-  if DestCp=CP_NONE then
-    DestCP:=DefaultSystemCodePage;
+  DSCP:=DefaultSystemCodePage;
+  if cp=CP_NONE then
+  begin
+    DestCP:=StringCodePage(DestS);
+    if (DestCP=0) or (DestCP=DSCP) then
+      DestCP:=CP_NONE;
+  end else  
+    DestCP:=cp;
 {$else FPC_HAS_CPSTRING}
   DestCP:=StringCodePage(DestS);
 {$endif FPC_HAS_CPSTRING}
@@ -338,7 +362,8 @@
           break;
         end;
     end;
-  if not sameCP then
+  { skip unicode conversion if dest encoding is CP_NONE }  
+  if (DestCP<>CP_NONE) and (not sameCP) then
     begin
       U:='';
       for i:=lowstart to high(sarr) do
@@ -352,8 +377,13 @@
 {$ifdef FPC_HAS_CPSTRING}
   { if the result is rawbytestring and all strings have the same code page,
     keep that code page }
-  if cp=CP_NONE then
-    DestCP:=tmpCP;
+  if DestCP=CP_NONE then
+  begin
+    if sameCP then
+      DestCP:=tmpCP
+      else
+        DestCP:=0;
+  end;
 {$endif FPC_HAS_CPSTRING}
   destcopy:=nil;
   nonemptystart:=lowstart;
@@ -401,7 +431,8 @@
           inc(pc,size);
         end;
     end;
-  SetCodePage(DestS,tmpCP,False);
+  if sameCP then
+    SetCodePage(DestS,tmpCP,False);
   SetCodePage(DestS,DestCP,True);
   fpc_AnsiStr_Decr_Ref(destcopy);
 end;
